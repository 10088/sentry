# TODO(billy): this workflow has not been re-named from `acceptance` because
# Visual Snapshots compares against artifacts from the same workflow name (on main branch)
# We should rename this when we have a more finalized naming scheme.
#
# Also note that this name *MUST* match the filename because GHA
# only provides the workflow name (https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables#default-environment-variables)
# and GH APIs only support querying by workflow *FILENAME* (https://developer.github.com/v3/actions/workflows/#get-a-workflow)
name: acceptance
on:
  push:
    branches:
      - master
      - releases/**
  pull_request:

jobs:
  frontend:
    name: frontend tests
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    strategy:
      matrix:
        instance: [0]

    env:
      VISUAL_HTML_ENABLE: 1
    steps:
      - uses: actions/checkout@v2
        name: Checkout sentry
        with:
          # Avoid codecov error message related to SHA resolution:
          # https://github.com/codecov/codecov-bash/blob/7100762afbc822b91806a6574658129fe0d23a7d/codecov#L891
          fetch-depth: '2'

      - name: Wait for frontend ci image
        uses: getsentry/action-wait-for-check@v1.1.0
        id: wait-for-frontend
        with:
          checkName: prepare frontend ci image

      - name: jest tests
        id: jest-tests
        run: |
          docker run --rm -v "$(pwd)":/workspace \
            ghcr.io/${{ github.repository_owner }}/sentry-frontend-ci:${{ github.sha }} \
            -s jest --listTests --json --roots /workspace
          _output=$(docker run --rm -v "$(pwd)":/workspace \
            ghcr.io/${{ github.repository_owner }}/sentry-frontend-ci:${{ github.sha }} \
            -s jest --listTests --json --roots /workspace)
          echo "::set-output name=tests::${_output}"

      - name: Build CSS
        env:
          NODE_ENV: production
        run: |
          mkdir -p src/sentry/static/sentry/dist
          docker run --rm -v "$(pwd)/src/sentry/static/sentry/dist":/workspace \
            ghcr.io/${{ github.repository_owner }}/sentry-frontend-ci:${{ github.sha }} \
            build-css --output-path=/workspace

      - name: jest
        env:
          CI_NODE_TOTAL: ${{ strategy.job-total }}
          CI_NODE_INDEX: ${{ matrix.instance }}
          JEST_TESTS: ${{ steps.jest-tests.outputs.tests }}
        run: |
          docker run --rm \
            ghcr.io/${{ github.repository_owner }}/sentry-frontend-ci:${{ github.sha }} \
            test-ci --forceExit

      - name: Save HTML artifacts
        uses: actions/upload-artifact@v2
        with:
          retention-days: 14
          name: jest-html
          path: .artifacts/visual-snapshots/jest

      - name: Create Images from HTML
        uses: getsentry/action-html-to-image@main
        with:
          base-path: .artifacts/visual-snapshots/jest
          css-path: src/sentry/static/sentry/dist/entrypoints/sentry.css

      - name: Save snapshots
        if: always()
        uses: getsentry/action-visual-snapshot@v2
        with:
          save-only: true
          snapshot-path: .artifacts/visual-snapshots

      - name: Handle artifacts
        uses: ./.github/actions/artifacts

  webpack:
    if: 1 == 0
    name: create frontend bundle
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    env:
      DOCKER_BUILDKIT: 1

    outputs:
      dist-path: ${{ steps.config.outputs.dist-path }}

    steps:
      - uses: actions/checkout@v2
        name: Checkout sentry

      - name: Wait for frontend ci image
        uses: getsentry/action-wait-for-check@v1.1.0
        id: wait-for-frontend
        with:
          checkName: prepare frontend ci image

      - name: webpack
        run: |
          mkdir dist
          docker run \
            --entrypoint /bin/ls \
            ghcr.io/${{ github.repository_owner }}/sentry-frontend-ci:${{ github.sha }} || true
          docker run -v "$(pwd)/dist":/workspace \
            ghcr.io/${{ github.repository_owner }}/sentry-frontend-ci:${{ github.sha }}
          # We a single archive to save as a GHA artifact
          tar czf dist.tar.gz dist

      - name: Save frontend dist
        uses: actions/upload-artifact@v2
        with:
          retention-days: 3
          name: frontend-dist
          path: dist.tar.gz

  acceptance:
    if: 1 == 0
    name: acceptance
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    strategy:
      matrix:
        instance: [0]

    env:
      VISUAL_SNAPSHOT_ENABLE: 1
      TEST_GROUP_STRATEGY: roundrobin

    steps:
      - uses: actions/checkout@v2
        name: Checkout sentry

      - name: Set python version output
        id: python-version
        run: |
          echo "::set-output name=python-version::$(cat .python-version)"

      # Until GH composite actions can use `uses`, we need to setup python here
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ steps.python-version.outputs.python-version }}

      - name: Setup pip
        uses: ./.github/actions/setup-pip
        id: pip

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip.outputs.pip-cache-dir }}
          key: |
            ${{ runner.os }}-py${{ steps.python-version.outputs.python-version }}-pip${{ steps.pip.outputs.pip-version }}-${{ secrets.PIP_CACHE_VERSION }}-${{ hashFiles('requirements-*.txt', '!requirements-pre-commit.txt') }}
          restore-keys: |
            ${{ runner.os }}-py${{ steps.python-version.outputs.python-version }}-pip${{ steps.pip.outputs.pip-version }}-${{ secrets.PIP_CACHE_VERSION }}

      - name: Setup sentry python env
        uses: ./.github/actions/setup-sentry
        id: setup
        with:
          snuba: true

      - name: Wait for frontend build
        uses: getsentry/action-wait-for-check@v1.1.0
        id: wait-for-frontend
        with:
          checkName: create frontend bundle

      - name: Did frontend build succeed
        if: steps.wait-for-frontend.outputs.conclusion == 'failure' || steps.wait-for-frontend.outputs.conclusion == 'timed_out'
        run: exit 1

      - name: Download frontend dist
        uses: actions/download-artifact@v2
        with:
          name: frontend-dist

      - name: Extract dist
        run: |
          mkdir -p src/sentry/static/sentry/dist
          tar xf dist.tar.gz --directory src/sentry/static/sentry

      - name: Run acceptance tests (#${{ steps.setup.outputs.matrix-instance-number }} of ${{ strategy.job-total }})
        if: always()
        run: |
          mkdir -p ${{ steps.setup.outputs.acceptance-dir }}
          mkdir -p ${{ steps.setup.outputs.acceptance-dir }}-mobile
          mkdir -p ${{ steps.setup.outputs.acceptance-dir }}-tooltips
          make run-acceptance
        env:
          PYTEST_SNAPSHOTS_DIR: ${{ steps.setup.outputs.acceptance-dir }}
          USE_SNUBA: 1

      - name: Save snapshots
        if: always()
        uses: getsentry/action-visual-snapshot@v2
        with:
          save-only: true
          snapshot-path: .artifacts/visual-snapshots

      - name: Handle artifacts
        uses: ./.github/actions/artifacts

  chartcuterie:
    if: false == true
    name: chartcuterie integration
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      matrix:
        instance: [0]
    env:
      VISUAL_SNAPSHOT_ENABLE: 1

    steps:
      - uses: actions/checkout@v2
        with:
          # Avoid codecov error message related to SHA resolution:
          # https://github.com/codecov/codecov-bash/blob/7100762afbc822b91806a6574658129fe0d23a7d/codecov#L891
          fetch-depth: '2'

      - name: Set python version output
        id: python-version
        run: |
          echo "::set-output name=python-version::$(cat .python-version)"

      # Until GH composite actions can use `uses`, we need to setup python here
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ steps.python-version.outputs.python-version }}

      - name: Setup pip
        uses: ./.github/actions/setup-pip
        id: pip

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip.outputs.pip-cache-dir }}
          key: |
            ${{ runner.os }}-py${{ steps.python-version.outputs.python-version }}-pip${{ steps.pip.outputs.pip-version }}-${{ secrets.PIP_CACHE_VERSION }}-${{ hashFiles('requirements-*.txt', '!requirements-pre-commit.txt') }}
          restore-keys: |
            ${{ runner.os }}-py${{ steps.python-version.outputs.python-version }}-pip${{ steps.pip.outputs.pip-version }}-${{ secrets.PIP_CACHE_VERSION }}

      - name: Setup sentry env
        uses: ./.github/actions/setup-sentry
        id: setup
        with:
          chartcuterie: true

      - name: yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.setup.outputs.yarn-cache-dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock', 'api-docs/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Javascript Dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Build chartcuterie configuration module
        run: |
          make build-chartcuterie-config

      - name: Run chartcuterie tests (${{ steps.setup.outputs.matrix-instance-number }} of ${{ strategy.job-total }})
        run: |
          mkdir -p ${{ steps.setup.outputs.acceptance-dir }}
          make test-chartcuterie
        env:
          PYTEST_SNAPSHOTS_DIR: ${{ steps.setup.outputs.acceptance-dir }}

      - name: Save snapshots
        if: always()
        uses: getsentry/action-visual-snapshot@v2
        with:
          save-only: true
          snapshot-path: .artifacts/visual-snapshots

      - name: Handle artifacts
        uses: ./.github/actions/artifacts
